

const stepsDefault = [
0,
2.10941666666864,
9.57334405864097,
18.5639882527417,
27.7973580679964,
37.8838988004915,
50.1842218829642,
56.3014759784006,
62.2067674636869,
67.0295131660259,
71.5773667198967,
75.4701273342437,
78.8184675465473,
81.5288227489695,
84.0196116538456,
86.2330117145252,
88.156428425772,
89.7376421986753,
91.1649185570251,
92.3767132350456,
93.4517908020136,
94.3390834435635,
95.1080579292291,
95.7761288455475,
96.360734338233,
96.8617349939577,
97.3114938486263,
97.6639493690023,
97.9902398990567,
98.2640188578812,
98.5094521600345,
98.72810154059,
98.8899920183995,
99.0433676596413,
99.1793345673468,
99.287943615116,
99.3877412509917,
99.4701177492471,
99.5444679342792,
99.6061270713908,
99.6605214688791,
99.7091954846364,
99.7484135666016,
99.7825281516075,
99.8124213214824,
99.8430631622558,
99.8609342560319,
99.8798643869714,
99.8976087399357,
99.9108054634618,
99.9230010680882,
99.9335727457063,
99.9427920871307,
99.950718104908,
99.9574604029455,
99.9634520241975,
99.968383996578,
99.9727413449065,
99.976520173073,
99.9797903535558,
99.9826206783705,
99.9849707619632,
99.9870341997791,
99.9888400460451,
99.9904437116513,
99.9917077337235,
99.9928293983206,
99.9938240376326,
99.9947439714011,
99.9954690147746,
99.9960388352294,
99.9965860496327,
99.9970772938361,
99.9974618744893,
99.9978208262339,
99.99811939128,
99.9983736905535,
99.9985992794949,
99.9987905680135,
99.9998536604459,
100
]

const steps100 = [
  0,
0.629166666670547,
3.52755864198187,
4.74969290122979,
8.71486469478598,
13.7510956090074,
19.0716497495143,
24.3073597094878,
29.3941061570734,
34.1954040812124,
38.8007640045894,
43.0549071215571,
47.0777046668963,
50.8188143211117,
54.6069917509692,
59.2120054644941,
61.1629946116946,
64.6470068719684,
66.2965304367343,
68.6936051153122,
70.8519285085707,
73.0341794776143,
74.9278898158581,
76.7442856234333,
78.3842769183346,
79.9348424674119,
81.4080007792239,
82.6846948310052,
83.9381927706812,
85.0504610241363,
86.1142893234181,
87.1195032109721,
88.0448256262168,
88.8840270962287,
91.0253406035682,
91.6636322350021,
92.2572067845679,
92.8091477061397,
93.3233544741866,
93.7979358422318,
94.2540659919974,
95.0324040751952,
95.3893496738824,
95.7171718971639,
96.0215111581114,
96.3052778652992,
96.5688801458474,
96.8135357529197,
97.0406163575477,
97.2519967377812,
97.447942834237,
97.6299170221174,
97.798963880817,
97.9557290735685,
98.1015373006423,
98.2372166660898,
98.3626961120157,
98.4793771640813,
98.5880531216397,
98.6887894998185,
98.7820178197075,
98.869039843555,
98.949982817885,
99.0245542720632,
99.0942078825805,
99.1587399036384,
99.2187087534534,
99.2744505795766,
99.326333923135,
99.3742321520346,
99.4188525106614,
99.4604216988828,
99.4991166599424,
99.5679439421017,
99.5987517068655,
99.6271250155373,
99.6538803446627,
99.6784897089755,
99.7014347034001,
99.7227117093177,
99.742472427276,
99.7608406962077,
99.7778988416139,
99.7937403084334,
99.8084518766247,
99.8220984800847,
99.8348346475305,
99.8466961776591,
99.8575428574051,
99.8676716499749,
99.877256090716,
99.8858827583097,
99.8940315606634,
99.9015789806191,
99.90859891079,
99.9151125342296,
99.9211689131617,
99.9267915824213,
99.9320117149227,
99.9368582350091,
99.941364438971,
99.9455478524476,
99.9494272262777,
99.9530374618593,
99.9563851698962,
99.9594960227833,
99.9623841636384,
99.9650679050773,
99.9675623174757,
99.9698719705859,
99.9720202537226,
99.9740296731212,
99.9758687241613,
99.9775894082497,
99.9791883165295,
99.980672722969,
99.9820496700514,
99.983332929631,
99.9845193294164,
99.985623815393,
99.9866598081694,
99.9876025544952,
99.9884855405394,
99.9893061093355,
99.9900695156588,
99.9907778142667,
99.9914350260292,
99.9920462798129,
99.9926132584298,
99.9931398201512,
99.9936292679639,
99.9940837955943,
99.9945109891234,
99.9952638834544,
99.9956016906536,
99.9959120641635,
99.9962048126794,
99.9964748844945,
99.9967266775214,
99.9969600826021,
99.9971767823179,
99.9973779767315,
99.997565209755,
99.9987300703542,
100,
]

/**
 * [linearInterpolator description]
 * @param  {[type]} domainArray something like [ { x, y }, ... ]
 * @param  {[type]} springValue [description]
 * @param  {String} stiffness   [description]
 * @param  {Number} speed       [description]
 * @return {[type]}             [description]
 */
export function linearInterpolator(domainArray, springValue, stiffness = 'default', speed = 1) {
  const steps = springSteps[stiffness]
  if (!steps) {
    throw "The stiffness is incorrect, cannot find the mapping spring steps"
  }
  let stepAt = steps.length - 1
  for (let i = 0; i < steps.length - 2; i++) {
    if (springValue >= steps[i] && springValue <  steps[i + 1]) {
      stepAt = i
      break
    }
  }
  if (stepAt == steps.length - 1) {
    return domainArray[domainArray.length - 1].x
  } else if (domainArray.length == 1) {
    return domainArray[0].x
  }

  let percentage = (stepAt + (springValue - steps[stepAt]) / (steps[stepAt + 1] - steps[stepAt])) / steps.length * speed
  percentage = Math.min(1, percentage)
  const domainLength = domainArray.length
  const startAt = Math.min(Math.floor(percentage * domainLength), domainLength - 1)
  const endAt = Math.min(Math.ceil(percentage * domainLength), domainLength - 1)

  const value = domainArray[startAt].x + (domainArray[endAt].x - domainArray[startAt].x) * (percentage * domainLength - startAt)
  return value
}

/**
 * according to the provided target value, interpolate the current value
 * @return {[type]} [description]
 */
export function linearInterpolateValue(targetValue, springValue, stiffness = 'default', speed = 1) {
  const steps = springSteps[stiffness]
  if (!steps) {
    throw "The stiffness is incorrect, cannot find the mapping spring steps"
  }

  let stepAt = steps.length - 1
  for (let i = 0; i < steps.length - 2; i++) {
    if (springValue >= steps[i] && springValue <  steps[i + 1]) {
      stepAt = i
      break
    }
  }

  if (stepAt == steps.length - 1) {
    return targetValue
  }

  let percentage = (stepAt + (springValue - steps[stepAt]) / (steps[stepAt + 1] - steps[stepAt])) / steps.length * speed
  percentage = Math.min(1, percentage)

  return targetValue * percentage
}

const springSteps = {
  'default': stepsDefault,
  100: steps100
}
